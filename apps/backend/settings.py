"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from urllib.parse import urlparse

SERVICE_COMMAND = os.environ.get("SERVICE_COMMAND")
SERVICE_NAME = os.environ.get("SERVICE_NAME")
FLY_APP_NAME = os.environ.get("FLY_APP_NAME")

IS_DEV_MODE = SERVICE_COMMAND == "dev"

DEBUG = bool(os.environ.get("DEBUG", IS_DEV_MODE))

BASE_DIR = Path(__file__).resolve().parent
BUILD_DIR = BASE_DIR / "build"
ASSETS_DIR = BASE_DIR / "assets"
PROJECT_ROOT = BASE_DIR / "src" / "backend"

SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-f8cge)81#503fxpdix5bx*yrg#=*$vp@_12cu3^kh)ntrn)&2a"
)

# Add this at the end of settings.py
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

SITE_URL = os.environ.get("SITE_URL", "http://localhost:80")
_parsed_site_url = urlparse(SITE_URL)
SITE_SCHEME = _parsed_site_url.scheme
SITE_HOST = _parsed_site_url.hostname
SITE_PORT = _parsed_site_url.port

ALLOWED_HOSTS = [
    f"{SITE_HOST}",
    f"{SITE_HOST}:{SITE_PORT}",
    "0.0.0.0",
    "localhost",
    "127.0.0.1",
    ".fly.dev",
]

CSRF_TRUSTED_ORIGINS = [
    SITE_URL,
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "rest_framework",
    "drf_spectacular",
    "django_filters",
    "django_vite",
    # Local apps
    "backend.mysite",
    "backend.todo",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            os.path.join(PROJECT_ROOT, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "environment": "backend.mysite.jinja2.environment",
        },
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.mysite.wsgi.application"

DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
        ssl_require=os.environ.get("DATABASE_SSL", "false") == "true",
        test_options={
            "NAME": "test_database",
        },
    )
}

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

APPEND_SLASH = False

VITE_MANIFEST = BUILD_DIR / ".vite" / "manifest.json"

STATICFILES_DIRS = [
    BUILD_DIR,
]

# Where the collectstatic command will put the static files
STATIC_ROOT = BUILD_DIR / "static"

# When rendering a static file, the URL will start with this
STATIC_URL = "static/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "API",
    "DESCRIPTION": "",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

DJANGO_VITE = {
    "default": {
        "dev_mode": IS_DEV_MODE,
        "dev_server_protocol": SITE_SCHEME,
        "dev_server_host": SITE_HOST,
        "dev_server_port": SITE_PORT,
        "static_url_prefix": "vite" if IS_DEV_MODE else "",
        "manifest_path": VITE_MANIFEST,
    }
}
