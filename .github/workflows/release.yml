name: Release

on:
  push:
    branches:
      - main
  merge_group:

concurrency:
  group: |
    ${{ github.workflow }}-
    ${{ (github.event_name == 'merge_group' || github.event_name == 'push' && github.event.sender.login != 'github-merge-queue[bot]') && 'push' || 'pr' }}
  cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

env:
  CI: true

jobs:
  context:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      event_name: ${{ steps.context.outputs.event_name }}
      push: ${{ steps.push_deploy.outputs.push }}
      deploy: ${{ steps.push_deploy.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4

      - name: Context
        id: context
        uses: ./.github/actions/context

      - name: Push / Deploy
        id: push_deploy
        env:
          event_name: ${{ github.event_name }}
          actor: ${{ github.event.sender.login }}
          merge_actor: github-merge-queue[bot]
        run: |
          push=false
          deploy=false

          # Push images on merge queue. This only runs on the target repo
          # so no need to check if it is a fork.
          if [[ "$event_name" == "merge_group" ]]; then
            push=true
            deploy=true
          # Push images on push events that were not sent by the merge queue bot
          # as merge queue commits are deployed before the PR is merged.
          elif [[ "$event_name" == "push" && "$actor" != "$merge_actor" ]]; then
            push=true
            deploy=true
          fi

          echo "event_name=$event_name"
          echo "push=$push" >> $GITHUB_OUTPUT
          echo "deploy=$deploy" >> $GITHUB_OUTPUT
          cat "$GITHUB_OUTPUT"

  version:
    needs: context
    runs-on: ubuntu-latest
    if: ${{ needs.context.outputs.event_name == 'push' }}
    permissions:
      contents: write
      packages: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - name: Build
        run: pnpm run --filter "./packages/*" build

      - name: Create and publish versions
        uses: changesets/action@v1
        with:
          commit: "chore: update versions"
          title: "chore: update versions"
          publish: pnpm publish:workspace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build:
    needs: context
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    uses: ./.github/workflows/_build.yml
    secrets: inherit
    with:
      push: ${{ needs.context.outputs.push == 'true' }}

  test:
    needs: [build, context]
    permissions:
      packages: read
      contents: read
    uses: ./.github/workflows/_test.yml
    secrets: inherit
    with:
      tag: ${{ needs.build.outputs.tag }}

  deploy_stage:
    if: ${{ needs.context.outputs.deploy == 'true' }}
    needs: [context, build, test]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    uses: ./.github/workflows/_deploy.yml
    secrets: inherit
    with:
      environment: stage
      version: ${{ needs.build.outputs.version }}
      digest: ${{ needs.build.outputs.digest }}

  deploy_prod:
    if: ${{ needs.context.outputs.deploy == 'true' }}
    needs: [context, build, deploy_stage, test]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    uses: ./.github/workflows/_deploy.yml
    secrets: inherit
    with:
      environment: prod
      version: ${{ needs.build.outputs.version }}
      digest: ${{ needs.build.outputs.digest }}

  checks:
    if: always()
    needs: [build, test, deploy_stage, deploy_prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check
        uses: ./.github/actions/check
        with:
          json: ${{ toJson(needs) }}
